package com.webank.wedatasphere.linkis.engine.pipeline.executor
import java.io.{ByteArrayInputStream, InputStream, OutputStream}

import com.webank.wedatasphere.linkis.common.io.FsPath
import com.webank.wedatasphere.linkis.engine.execute.EngineExecutorContext
import com.webank.wedatasphere.linkis.engine.pipeline.exception.PipeLineErrorException
import com.webank.wedatasphere.linkis.engine.pipeline.util.{PipeLineConstants, PipeLineUtils}
import com.webank.wedatasphere.linkis.scheduler.executer.{ExecuteResponse, SuccessExecuteResponse}
import com.webank.wedatasphere.linkis.server._
import com.webank.wedatasphere.linkis.storage.{FSFactory, LineMetaData, LineRecord}
import com.webank.wedatasphere.linkis.storage.resultset.{ResultSetFactory, ResultSetReader}
import org.apache.commons.io.IOUtils

/**
  * Created by johnnwang on 2019/1/30.
  */
class TxtExecutor(options: JMap[String, String]) extends PipeLineExecutor{
  override def execute(code: String, engineExecutorContext: EngineExecutorContext, jobGroup: String): ExecuteResponse = {
    val sourcePath = pipeEntity.getSource
    if (!PipeLineUtils.isDolphin(sourcePath)) throw new PipeLineErrorException(70005, "不是结果集文件")
    val sourceFsPath = new FsPath(sourcePath)
    val destPath = pipeEntity.getDest
    val destFsPath = new FsPath(destPath)
    val sourceFs = FSFactory.getFs(sourceFsPath)
    sourceFs.init(null)
    val destFs = FSFactory.getFs(destFsPath)
    destFs.init(null)
    val resultset = ResultSetFactory.getInstance.getResultSetByPath(sourceFsPath)
    val reader = ResultSetReader.getResultSetReader(resultset, sourceFs.read(sourceFsPath))
    val metadata = reader.getMetaData
    if (!PipeLineUtils.isLineResultset(metadata)) throw new PipeLineErrorException(70006, "只有line类型的结果集才能转为txt");
    val content = new StringBuffer()
    content.append(metadata.asInstanceOf[LineMetaData].getMetaData)
    while(reader.hasNext){
      content.append(reader.getRecord.asInstanceOf[LineRecord].getLine)
    }
    val inputStream:InputStream = new ByteArrayInputStream(content.toString().getBytes(PipeLineConstants.DEFAULTCHARSET))
    val outputStream:OutputStream = destFs.write(destFsPath,PipeLineConstants.DEFAULTOVERWIRTE)
    // TODO: a series of close（一系列的close）
    IOUtils.copy(inputStream,outputStream)
    IOUtils.closeQuietly(outputStream)
    IOUtils.closeQuietly(inputStream)
    if (reader != null) reader.close()
    if(sourceFs != null) sourceFs.close()
    if(destFs != null) destFs.close()
    SuccessExecuteResponse()
  }
}
